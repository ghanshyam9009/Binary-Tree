/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void preorder(TreeNode* root,int target,vector<vector<int>> &ans,int sum,vector<int> temp)
    {
        //Using preorder traversal
        if(root == NULL)
            return;
        sum+= root->val;
        temp.push_back(root->val);
        if(root->left == NULL && root->right == NULL && sum == target)
        { 
            ans.push_back(temp);
            return;
        }
        preorder(root->left,target,ans,sum,temp);
        preorder(root->right,target,ans,sum,temp);
    }

    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<vector<int>> ans;
        if(root == NULL)
            return ans;
        vector<int> temp;
        preorder(root,targetSum,ans,0,temp);
        return ans;
    }
};

// backtrracking

// class Solution {
// public:
//     vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
//         vector<vector<int>> result;
//         vector<int> currentPath;
//         pathSumHelper(root, targetSum, currentPath, result);
//         return result;
//     }

//     void pathSumHelper(TreeNode* root, int targetSum, vector<int>& currentPath,             vector<vector<int>>& result) {
//         if (root == nullptr) {
//             return;
//         }

//         currentPath.push_back(root->val);

//         if (root->left == nullptr && root->right == nullptr && root->val == targetSum) {
//             result.push_back(currentPath);
//         }

//         pathSumHelper(root->left, targetSum - root->val, currentPath, result);
//         pathSumHelper(root->right, targetSum - root->val, currentPath, result);

//         currentPath.pop_back();
//     }
// };
