#include <bits/stdc++.h> 
/************************************************************

    Following is the TreeNode class structure

    template <typename T>
    class TreeNode {
       public:
        T val;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T val) {
            this->val = val;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/

TreeNode<int>* lca(TreeNode<int> *root, int node1, int node2)
{
    if(root==NULL)
    {
        return NULL;
    }

    if(root->val == node1 || root->val == node2)
    {
        return root;
        
    }

    TreeNode<int>*leftside = lca(root->left,node1,node2);
    TreeNode<int>*rightside = lca(root->right,node1,node2);

    if(leftside == NULL && rightside!=NULL)
    {
        return rightside;
    }

    else if(leftside!=NULL && rightside==NULL)
    {
        return leftside;
    }

    else if(leftside!=NULL && rightside!=NULL)
    {
        return root;
    }

    else
    {
        return NULL;
    }

}

int finddistance(TreeNode<int>*root,int node1,int level)
{
    if(root==NULL)
    {
        return -1;
    }

    if(root->val == node1)
    {
        return level;
    }

    int left = finddistance(root->left,node1,level+1);

    if(left == -1)
    {
        return finddistance(root->right,node1,level+1);
    }

    return left;
}

int findDistanceBetweenNodes(TreeNode<int> *root, int node1, int node2)
{
    // Write your code here.
    //finding  lowest ancesator

    TreeNode<int>* ances = lca(root,node1,node2);

    //distance between ances and node1

    int nod1 = finddistance(ances,node1,0);

    //distance between ances and node2

    int nod2 = finddistance(ances,node2,0);

    int ans = nod1+nod2;

    if(ans<0)

    {

        return -1;

    }

    return ans;

}

