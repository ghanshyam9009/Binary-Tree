
class Solution {
public:
    int helper(TreeNode* root){
        if(!root)return 1e8;
        if(!root->left&&!root->right)return 1;
        return 1+min(helper(root->left),helper(root->right));
    }
    int minDepth(TreeNode* root) {
        if(!root)return 0;
        return helper(root);
    }
};

// BFS APPROACH 

class Solution {
public:
    int minDepth(TreeNode* root) {
        if(!root)return 0;
        queue<TreeNode*> q;
        q.push(root);
        int count=0;
        while(!q.empty()){
            int n = q.size();
            for(int i = 0; i<n; i++){
                auto temp = q.front();
                q.pop();
                if(!temp->left&&!temp->right)return count+1;
                if(!temp->left){
                    q.push(temp->right);
                    continue;
                }
                if(!temp->right){
                    q.push(temp->left);
                    continue;
                }
                q.push(temp->right);
                q.push(temp->left);
            }
            count++;
        }
        return count;
    }
};
