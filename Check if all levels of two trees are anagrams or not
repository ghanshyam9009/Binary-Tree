#include <bits/stdc++.h> 
/**********************************************************
    Following is the Binary Tree Node class structure

    template <typename T>
    class TreeNode {
    public :
        T val;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T val) {
            this -> val = val;
            left = NULL;
            right = NULL;
        }
    };

***********************************************************/
//BFS APPROACH

bool anagram(TreeNode<int>*root1, int n, TreeNode<int>*root2, int m)
{

    queue<TreeNode<int>*> q1;
    queue<TreeNode<int>*> q2;

    q1.push(root1);
    q2.push(root2);

    while(!q1.empty()&& !q2.empty()){

        if(q1.size()!=q2.size()){
            return false;
        }

        int s=q1.size();
        vector<int> v1,v2;

        while(s--){

            v1.push_back(q1.front()->val);
            v2.push_back(q2.front()->val);        

            auto front1=q1.front();
            auto front2=q2.front();

            q1.pop();
            q2.pop();

            if(front1->left){
                q1.push(front1->left);
            }

            if(front2->left){
                q2.push(front2->left);
            }

            if(front1->right){
                q1.push(front1->right);
            }

            if (front2->right) {
              q2.push(front2->right);
            }

        }

        sort(v1.begin(),v1.end());
        sort(v2.begin(),v2.end());

        if (v1!=v2) {
            return false;
        }
    }
    return true;
}

 

//*********************************************************************

//DFS APPROACH

 

// void dfs(TreeNode<int>*root,int level,unordered_map<int,vector<int>> &mp){

//     if(!root){

//         return;

//     }

//     mp[level].push_back(root->val);

//     dfs(root->left,level+1,mp);

//     dfs(root->right,level+1,mp);

// }

 

// bool anagram(TreeNode<int>*root1, int n, TreeNode<int>*root2, int m)

// {

//     unordered_map<int,vector<int>> mp1,mp2;

//     dfs(root1,0,mp1);

//     dfs(root2,0,mp2);

//     if(mp1.size()!=mp2.size()){

//         return false;

//     }

//     for(int i=0;i<mp1.size();i++){

//         auto v1=mp1[i];

//         auto v2=mp2[i];

//         sort(v1.begin(),v1.end());

//         sort(v2.begin(),v2.end());

//         if (v1 != v2) {

//           return false;

//         }

//     }

//     return true;

// }

 
