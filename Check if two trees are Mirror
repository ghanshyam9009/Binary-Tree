
bool rec(BinaryTreeNode<int> *root1, BinaryTreeNode<int> *root2)

{
    if (!root1 || !root2) return root1==root2;

    if (root1->data != root2->data) return false;

    return rec(root1->left,root2->right) && rec(root1->right,root2->left);
}

bool areMirror(BinaryTreeNode<int> *root1, BinaryTreeNode<int> *root2)
{
   return rec(root1,root2);
}




// approach 2

bool isMirrorIterative(Node* root1, Node* root2)
{
    if (root1 == NULL && root2 == NULL)
        return true;
     
    if (root1 == NULL || root2 == NULL)
        return false;
     
    stack<Node*> s1, s2;
    s1.push(root1);
    s2.push(root2);
     
    while (!s1.empty() && !s2.empty())
    {
        Node* curr1 = s1.top();
        s1.pop();
        Node* curr2 = s2.top();
        s2.pop();
         
        if (curr1->data != curr2->data)
            return false;
         
        if (curr1->left != NULL && curr2->right != NULL)
        {
            s1.push(curr1->left);
            s2.push(curr2->right);
        }
        else if (curr1->left != NULL || curr2->right != NULL)
            return false;
         
        if (curr1->right != NULL && curr2->left != NULL)
        {
            s1.push(curr1->right);
            s2.push(curr2->left);
        }
        else if (curr1->right != NULL || curr2->left != NULL)
            return false;
    }
     
    if (!s1.empty() || !s2.empty())
        return false;
     
    return true;
}
