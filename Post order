C++ RECURSIVE APPROACH

class Solution {
public:
    vector<int> ans;
    void postorder(TreeNode* root){
        if (root==NULL)return;
        postorder(root->left);
        postorder(root->right);
        ans.push_back(root->val);
    }
    vector<int> postorderTraversal(TreeNode* root) {
        postorder(root);
        return ans;
    }
};
C++ ITERATIVE APPRAOCH

vector<int> postorderTraversal(TreeNode* root){
        vector<int> ans;
        if(root==NULL)return ans;
        stack<TreeNode*> stk;
        stk.push(root);
        TreeNode* node= root;
        while(!stk.empty()){
            node= stk.top();
            stk.pop();
            if(node->left)stk.push(node->left);
            if(node->right)stk.push(node->right);
            ans.push_back(node->val);
            
        }
        reverse(ans.begin(),ans.end());
        return ans;
    }
