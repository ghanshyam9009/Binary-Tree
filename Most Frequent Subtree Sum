/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    map<int,int>mp;
    int findSum(TreeNode* root){
        if(!root)return 0;
        int lsum=findSum(root->left);
        int rsum=findSum(root->right);
        mp[root->val+lsum+rsum]++;
        return root->val+lsum+rsum;
    }


    vector<int> findFrequentTreeSum(TreeNode* root) {
        vector<int>ans;
        findSum(root);
        priority_queue<pair<int,int>>q;
        for(auto it=mp.begin();it!=mp.end();it++){
            q.push({it->second,it->first});
        }
        int max_freq=q.top().first;
        while(!q.empty() && q.top().first==max_freq){
            ans.push_back(q.top().second);
            q.pop();
        }
        return ans;
    }
};




//  vector<int> ans;
//         solve(root);
//         int maxFreqSum = 0;
//         for(auto it: mp){
//             maxFreqSum = max(maxFreqSum, it.second);
//         }
        
//         for(auto it: mp){
//             if(it.second == maxFreqSum){
//                 ans.push_back(it.first);
//             }
//         }
//         return ans;
